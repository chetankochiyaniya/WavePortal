{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","contractABI","contractJson","abi","waves","setWaves","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","useEffect","getAllWave","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","getAllWaves","waveCleand","forEach","push","address","sender","timestamp","Date","message","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5726d5f.chunk.js","sourcesContent":["import { ContractFactory, ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport contractJson from './utils/WavePoratl.json'\r\n \r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const contractAddress = \"0x24D4a7AA264f4f999040656c59cd432BcA715241\" // polygon scan -> to cotract hash\r\n  const contractABI = contractJson.abi\r\n  const [waves,setWaves] = useState([]);\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n \r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n \r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n \r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n \r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n \r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n \r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n \r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    getAllWave();\r\n  },[waves.length])\r\n\r\n  \r\nconst wave = async () => {\r\n  try {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n      let count = await wavePortalContract.getTotalWaves();\r\n      console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n      /*\r\n      * Execute the actual wave from your smart contract\r\n      */\r\n      const waveTxn = await wavePortalContract.wave(\"Hello this is my msg from react app\");\r\n      console.log(\"Mining...\", waveTxn.hash);\r\n\r\n      await waveTxn.wait();\r\n      console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n      count = await wavePortalContract.getTotalWaves();\r\n      console.log(\"Retrieved total wave count...\", count.toNumber());\r\n    } else {\r\n      console.log(\"Ethereum object doesn't exist!\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nconst getAllWave=async ()=>{\r\n  try{\r\n    const {ethereum} = window;\r\n\r\n    if(ethereum){\r\n     const provider = new ethers.providers.Web3Provider(ethereum);\r\n     const signer = provider.getSigner();\r\n     const wavePortalContract = new ethers.Contract(contractAddress,contractABI,signer);\r\n\r\n    const waves = await wavePortalContract.getAllWaves();\r\n\r\n    let waveCleand = [];\r\n    waves.forEach(wave=>{\r\n      waveCleand.push({\r\n        address: wave.sender,\r\n        timestamp: new Date(wave.timestamp * 1000),\r\n        message: wave.message \r\n      })\r\n    })\r\n    setWaves(waveCleand);\r\n    console.log(waveCleand);\r\n    }\r\n  }catch(err){\r\n    console.log(err);\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n        ðŸ‘‹ Hey there!\r\n        </div>\r\n \r\n        <div className=\"bio\">\r\n          I am Chetan Kochiyaniya and I worked on Blockchain so that's pretty cool right? Connect your Ethereum wallet and wave at me!\r\n        </div>\r\n \r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n \r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n\r\n        {waves.map((wave, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {wave.address}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n              <div>Message: {wave.message}</div>\r\n            </div>)\r\n        })}\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}